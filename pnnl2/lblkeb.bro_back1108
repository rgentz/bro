@load base/protocols/krb/
@load base/files/x509/

event krb_error(c: connection, msg: KRB::Error_Msg) &priority=5{
 print " ";
 print "KRB_ERROR";
 print msg;
 print "next is the connection info";
 print c;
}

event x509_certificate(f: fa_file, cert_ref: opaque of x509, cert: X509::Certificate){
 #We get this if the test was successful
 print " ";
 print "x509 certificate sucessfull";
 print cert;
}

event x509_ext_basic_constraints(f: fa_file, ext: X509::BasicConstraints){
print "x509 test";
}



event krb_as_request(c: connection, msg: KRB::KDC_Request) &priority=-20
        {
 print " ";
	print "got as req_marked";
        local info: KRB::Info;
	
	if ( c?$krb && c$krb$logged )
                return;


        if ( !c?$krb )
                {
                info$ts  = network_time();
                info$uid = c$uid;
                info$id  = c$id;
                }
        else
                info = c$krb;

        info$request_type = "AS";
        info$client = fmt("%s/%s", msg$client_name, msg$service_realm);
        info$service = msg$service_name;

        if ( msg?$from )
                info$from = msg$from;

        info$till = msg$till;

        info$forwardable = msg$kdc_options$forwardable;
        info$renewable = msg$kdc_options$renewable;

	print info;
        }


event krb_tgs_request(c: connection, msg: KRB::KDC_Request) &priority=5
        {

	print " ";
	print "got KRB TGS request";
	
        if ( c?$krb && c$krb$logged )
                return;

        local info: KRB::Info;
        info$ts  = network_time();
        info$uid = c$uid;
        info$id  = c$id;
        info$request_type = "TGS";
        info$service = msg$service_name;
        if ( msg?$from ) info$from = msg$from;
        info$till = msg$till;

        info$forwardable = msg$kdc_options$forwardable;
        info$renewable = msg$kdc_options$renewable;

	print info;
        }

event krb_as_response(c: connection, msg: KRB::KDC_Response) &priority=5
        {
	print "";
	print "got KRB as response";
        local info: KRB::Info;

        if ( c?$krb && c$krb$logged )
                return;

        if ( c?$krb )
                info = c$krb;

        if ( ! info?$ts )
                {
                info$ts  = network_time();
                info$uid = c$uid;
                info$id  = c$id;
                }

        if ( ! info?$client )
                info$client = fmt("%s/%s", msg$client_name, msg$client_realm);

        info$service = msg$ticket$service_name;
        info$cipher  = KRB::cipher_name[msg$ticket$cipher];
        info$success = T;
	
	print info;
        }


event krb_tgs_response(c: connection, msg: KRB::KDC_Response) &priority=5
        {
	print "";
	print "got krb tgs response";
        local info: KRB::Info;

        if ( c?$krb && c$krb$logged )
                return;

        if ( c?$krb )
                info = c$krb;

        if ( ! info?$ts )
                {
                info$ts  = network_time();
                info$uid = c$uid;
                info$id  = c$id;
                }

        if ( ! info?$client )
                info$client = fmt("%s/%s", msg$client_name, msg$client_realm);

        info$service = msg$ticket$service_name;
        info$cipher  = KRB::cipher_name[msg$ticket$cipher];
        info$success = T;

	print info;
        }


 event bro_init(){
 print "startup";
}

event bro_done(){
 print "finished";
}


event krb_tgs_response(c: connection, msg: KRB::KDC_Response){
 print "krb_ap";

 print msg;
}


event krb_safe(c: connection, is_orig: bool, msg: KRB::SAFE_Msg){
 #A Kerberos 5 Safe Message as defined in RFC 4120. This is a safe (checksummed) application message 

 print "krb_ap";
print msg;
 
}

event nonexist(){
 print "a";
}
